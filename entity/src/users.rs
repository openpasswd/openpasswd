//! SeaORM Entity. Generated by sea-orm-codegen 0.8.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub email: String,
    #[sea_orm(column_type = "Text")]
    pub password: String,
    pub master_key: Option<String>,
    pub last_login: Option<DateTimeUtc>,
    pub fail_attempts: i16,
    pub last_attempt: Option<DateTimeUtc>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::user_password_recovery::Entity")]
    UserPasswordRecovery,
    #[sea_orm(has_many = "super::account_groups::Entity")]
    AccountGroups,
    #[sea_orm(has_many = "super::accounts::Entity")]
    Accounts,
    #[sea_orm(has_many = "super::devices::Entity")]
    Devices,
}

impl Related<super::user_password_recovery::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserPasswordRecovery.def()
    }
}

impl Related<super::account_groups::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AccountGroups.def()
    }
}

impl Related<super::accounts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Accounts.def()
    }
}

impl Related<super::devices::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Devices.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
